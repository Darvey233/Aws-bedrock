{"filter":false,"title":"image_variation_lib.py","tooltip":"/workshop/labs/image_variation/image_variation_lib.py","undoManager":{"mark":6,"position":6,"stack":[[{"start":{"row":0,"column":0},"end":{"row":26,"column":0},"action":"insert","lines":["import boto3","import json","import base64","from io import BytesIO","from random import randint","","","#get a BytesIO object from file bytes","def get_bytesio_from_bytes(image_bytes):","    image_io = BytesIO(image_bytes)","    return image_io","","","#get a base64-encoded string from file bytes","def get_base64_from_bytes(image_bytes):","    resized_io = get_bytesio_from_bytes(image_bytes)","    img_str = base64.b64encode(resized_io.getvalue()).decode(\"utf-8\")","    return img_str","","","#load the bytes from a file on disk","def get_bytes_from_file(file_path):","    with open(file_path, \"rb\") as image_file:","        file_bytes = image_file.read()","    return file_bytes","",""],"id":1}],[{"start":{"row":26,"column":0},"end":{"row":27,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":27,"column":0},"end":{"row":52,"column":0},"action":"insert","lines":["#get the stringified request body for the InvokeModel API call","def get_titan_image_variation_request_body(prompt, image_bytes = None):","    ","    input_image_base64 = get_base64_from_bytes(image_bytes)","    ","    body = { #create the JSON payload to pass to the InvokeModel API","        \"taskType\": \"IMAGE_VARIATION\",","        \"imageVariationParams\": {","            \"images\": [","                input_image_base64","            ],  # The image to vary. This array must contain only one element.","            \"text\": prompt,  # A description of the original image","        },","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,  # Number of variations to generate","            \"quality\": \"premium\",  # Allowed values are \"standard\" or \"premium\"","            \"height\": 512,","            \"width\": 512,","            \"cfgScale\": 8.0,","            \"seed\": randint(0, 100000),  # Use a random seed","        },","    }","    ","    return json.dumps(body)","",""],"id":3}],[{"start":{"row":52,"column":0},"end":{"row":53,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":53,"column":0},"end":{"row":79,"column":0},"action":"insert","lines":["#get a BytesIO object from the Titan Image Generator response","def get_titan_response_image(response):","","    response = json.loads(response.get('body').read())","    ","    images = response.get('images')","    ","    image_data = base64.b64decode(images[0])","","    return BytesIO(image_data)","","","#generate an image using Amazon Titan Image Generator","def get_image_from_model(prompt_content, image_bytes):","    session = boto3.Session()","","    bedrock = session.client(service_name='bedrock-runtime') #creates a Bedrock client","    ","    body = get_titan_image_variation_request_body(prompt_content, image_bytes) #prompt text hardcode since it doesn't matter","    ","    response = bedrock.invoke_model(body=body, modelId=\"amazon.titan-image-generator-v1\", contentType=\"application/json\", accept=\"application/json\")","    ","    output = get_titan_response_image(response)","    ","    return output","",""],"id":5}],[{"start":{"row":79,"column":0},"end":{"row":80,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":80,"column":0},"end":{"row":81,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":80,"column":0},"end":{"row":81,"column":0},"action":"remove","lines":["",""],"id":7}]]},"ace":{"folds":[],"scrolltop":796,"scrollleft":0,"selection":{"start":{"row":80,"column":0},"end":{"row":80,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1716775294844,"hash":"32c070a243f4fb9380b421109759d6713bc2e665"}