{"filter":false,"title":"showcase_lib.py","tooltip":"/workshop/labs/showcase/showcase_lib.py","undoManager":{"mark":17,"position":17,"stack":[[{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["from langchain_community.llms import Bedrock","from langchain.prompts import PromptTemplate","",""],"id":1}],[{"start":{"row":3,"column":0},"end":{"row":21,"column":0},"action":"insert","lines":["def get_llm():","    ","    model_kwargs = { #AI21","        \"maxTokens\": 1024, ","        \"temperature\": 0, ","        \"topP\": 0.5, ","        \"stopSequences\": [], ","        \"countPenalty\": {\"scale\": 0 }, ","        \"presencePenalty\": {\"scale\": 0 }, ","        \"frequencyPenalty\": {\"scale\": 0 } ","    }","    ","    llm = Bedrock(","        model_id=\"ai21.j2-ultra-v1\", #set the foundation model","        model_kwargs=model_kwargs) #configure the inference parameters","    ","    return llm","",""],"id":2}],[{"start":{"row":21,"column":0},"end":{"row":29,"column":0},"action":"insert","lines":["def get_prompt(user_input, template):","    ","    prompt_template = PromptTemplate.from_template(template) #this will automatically identify the input variables for the template","","    prompt = prompt_template.format(user_input=user_input)","    ","    return prompt","",""],"id":3}],[{"start":{"row":3,"column":14},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":4,"column":0},"end":{"row":4,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":4,"column":4},"end":{"row":4,"column":5},"action":"insert","lines":["#"],"id":5}],[{"start":{"row":4,"column":5},"end":{"row":6,"column":54},"action":"insert","lines":["Add a function to create a Bedrock LangChain client.","","This includes the inference parameters we want to use."],"id":6}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"remove","lines":["",""],"id":7},{"start":{"row":4,"column":57},"end":{"row":5,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":4,"column":57},"end":{"row":4,"column":58},"action":"insert","lines":[" "],"id":8}],[{"start":{"row":22,"column":37},"end":{"row":23,"column":0},"action":"insert","lines":["",""],"id":9},{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"insert","lines":["    "]},{"start":{"row":23,"column":4},"end":{"row":23,"column":5},"action":"insert","lines":["#"]}],[{"start":{"row":23,"column":5},"end":{"row":25,"column":77},"action":"insert","lines":["Add the function to create the custom prompt.","","This code builds a custom prompt from the template and user input parameters."],"id":10}],[{"start":{"row":23,"column":50},"end":{"row":25,"column":0},"action":"remove","lines":["","",""],"id":11}],[{"start":{"row":23,"column":50},"end":{"row":23,"column":51},"action":"insert","lines":[" "],"id":12}],[{"start":{"row":31,"column":0},"end":{"row":38,"column":0},"action":"insert","lines":["def get_text_response(user_input, template): #text-to-text client function","    llm = get_llm()","    ","    prompt = get_prompt(user_input, template)","    ","    return llm.invoke(prompt) #return a response to the prompt","",""],"id":13}],[{"start":{"row":31,"column":44},"end":{"row":31,"column":45},"action":"remove","lines":[" "],"id":14},{"start":{"row":31,"column":44},"end":{"row":32,"column":0},"action":"insert","lines":["",""]},{"start":{"row":32,"column":0},"end":{"row":32,"column":4},"action":"insert","lines":["    "]},{"start":{"row":32,"column":4},"end":{"row":33,"column":0},"action":"insert","lines":["",""]},{"start":{"row":33,"column":0},"end":{"row":33,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":32,"column":4},"end":{"row":34,"column":50},"action":"insert","lines":["Add this function to call Bedrock.","","This function passes the custom prompt to Bedrock."],"id":15}],[{"start":{"row":32,"column":4},"end":{"row":32,"column":5},"action":"insert","lines":["#"],"id":16}],[{"start":{"row":32,"column":39},"end":{"row":34,"column":0},"action":"remove","lines":["","",""],"id":17}],[{"start":{"row":32,"column":39},"end":{"row":32,"column":40},"action":"insert","lines":[" "],"id":18}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":18,"column":56},"end":{"row":18,"column":56},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1716784243164,"hash":"4a67fba3d98513a9fa51aa352cb0bbb82f9f738a"}